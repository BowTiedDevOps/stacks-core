name: Open Docs PR

env:
  TARGET_REPOSITORY: BowTiedDevOps/docs-testing
  TARGET_REPOSITORY_BRANCH: main
  TARGET_REPOSITORY_PATH: ./stacks-network-docs
  BUILD_DOCS_OUTPUT_PATH: ./docs-output

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write

jobs:
  docs-pr:
    name: Open Docs PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build docs
        id: build_docs
        env:
          DOCKER_BUILDKIT: 1
        run: rm -rf ${{ env.BUILD_DOCS_OUTPUT_PATH }} && docker build -o ${{ env.BUILD_DOCS_OUTPUT_PATH }} -f ./.github/actions/docsgen/Dockerfile.docsgen .

      - name: Checkout latest docs
        id: git_checkout_docs
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ env.TARGET_REPOSITORY }}
          ref: ${{ env.TARGET_REPOSITORY_BRANCH }}
          path: ${{ env.TARGET_REPOSITORY_PATH }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Generate Docs
        id: generate_docs
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const INPUT_FILE_PATH = path.join('${{ env.BUILD_DOCS_OUTPUT_PATH }}', 'clarity-reference.json');
            const OUTPUT_FUNCTIONS_FILE_PATH = path.join('${{ env.TARGET_REPOSITORY_PATH }}', 'reference', 'functions.md');
            const OUTPUT_KEYWORDS_FILE_PATH = path.join('${{ env.TARGET_REPOSITORY_PATH }}', 'reference', 'keywords.md');

            const escapeSpecialChars = (str) => {
              return str.replace(/[*_#]/g, '\\$&');
            };

            const readFile = (path) => {
              try {
                return fs.readFileSync(path, 'utf8');
              } catch (err) {
                console.error('Error reading JSON file:', err);
                return null;
              }
            };

            const writeToFile = (path, data) => {
              fs.writeFile(path, data, 'utf8', (err) => {
                if (err) {
                  console.error('Error writing Markdown file:', err);
                  return;
                };
                console.log('Markdown file created successfully:', path);
              });
            };

            const getFileContentsParsed = () => {
              const data = readFile(INPUT_FILE_PATH);
              if (!data) {
                return null;
              };

              const jsonData = JSON.parse(data);
              if (!jsonData.functions || !Array.isArray(jsonData.functions)) {
                console.error('Invalid JSON structure: functions array missing');
                return null;
              };

              return jsonData;
            };

            const transformFunctions = (jsonData) => {
              let markdownFunctions = '# Functions\n\n';

              jsonData.functions.forEach(entry => {
                markdownFunctions += `## ${escapeSpecialChars(entry.name)}\n\n`;
                markdownFunctions += `Introduced in: **${entry.min_version.replace(/(\d+)/, ' $1')}**\n\n`;

                if (entry.max_version !== null) {
                  markdownFunctions += `Removed in: **${entry.max_version.replace(/(\d+)/, ' $1')}**\n\n`;
                };

                markdownFunctions += `**Input:** \`${entry.input_type}\`\n\n`;
                markdownFunctions += `**Output:** \`${entry.output_type}\`\n\n`;
                markdownFunctions += `**Signature:** \`${entry.signature}\`\n\n`;
                markdownFunctions += `**Description:**\n\n${entry.description}\n\n`;
                markdownFunctions += "**Example:**\n\n\`\`\`\n" + `${entry.example.trim()}` + "\n\`\`\`\n\n";
              });

              writeToFile(OUTPUT_FUNCTIONS_FILE_PATH, markdownFunctions);
            };

            const transformKeywords = (jsonData) => {
              let markdownKeywords = '# Clarity Keywords\n\n';

              jsonData.keywords.forEach(entry => {
                markdownKeywords += `### ${escapeSpecialChars(entry.name)} <a href="\#${entry.name}" id="${entry.name}"></a>\n\n`;

                if (entry.name == "block-height")
                  markdownKeywords += `{% hint style="info" %}\nThe Nakamoto hard fork will introduce a few new Clarity keywords. It's important to note that even with the new [block production mechanism](../concepts/block-production/), the \`block-height\` keyword behavior will not change. It will simply correspond to the current tenure height. This means any Clarity contracts using this keyword will be backwards compatible after the Nakamoto Upgrade.\n{% endhint %}\n\n`
                else if (entry.name == "burn-block-height")
                  markdownKeywords += `{% hint style="warning" %}\nThere is a bug in Clarity 3 when \`burn-block-height\` is used within an \`at-block\` expression. Normally, keywords executed within an \`at-block\` expression will return the data for that specified block. This bug causes \`burn-block-height\` to always return the burn block at the current chain tip, even within an \`at-block\` expression. This behavior affects any Clarity 3 contracts and will be fixed in a future hard fork.\n{% endhint %}\n\n`
                else if (entry.name == "contract-caller")
                  markdownKeywords += `{% hint style="warning" %}\nUse caution when leveraging all contract calls, particularly tx-sender and contract-caller as based on the design, you can unintentionally introduce attack surface area. [Read more](https://www.setzeus.com/community-blog-posts/clarity-carefully-tx-sender).\n{% endhint %}\n\n`
                else if (entry.name == "tx-sender")
                  markdownKeywords += `{% hint style="warning" %}\nUse caution when leveraging all contract calls, particularly tx-sender and contract-caller as based on the design, you can unintentionally introduce attack surface area. [Read more](https://www.setzeus.com/community-blog-posts/clarity-carefully-tx-sender).\n{% endhint %}\n\n`

                markdownKeywords += `Introduced in: ${entry.min_version.replace(/(\d+)/, ' $1')}\n\n`;

                if (entry.max_version !== null) {
                  markdownKeywords += `Removed in: ${entry.max_version.replace(/(\d+)/, ' $1')}\n\n`;
                };

                markdownKeywords += `**Output: \`${entry.output_type}\`**\n\n`;
                markdownKeywords += `**Description:**\n\n${entry.description}\n\n`;
                markdownKeywords += "**Example:**\n\n\`\`\`\n" + `${entry.example.trim()}` + "\n\`\`\`\n\n";
              });

              writeToFile(OUTPUT_KEYWORDS_FILE_PATH, markdownKeywords);
            };

            const main = () => {
              const jsonData = getFileContentsParsed();
              if (jsonData) {
                transformFunctions(jsonData);
                transformKeywords(jsonData);
              };
            };

            main();

      - name: Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          ## enter docs working directory
          cd ${{ env.TARGET_REPOSITORY_PATH }}

          ## set some defaults
          TIMESTAMP=$(date +%s)
          SOURCE_BRANCH="chore/update_clarity_ref_${TIMESTAMP}"
          TARGET_BRANCH=${{ env.TARGET_REPOSITORY_BRANCH }}
          COMMIT_HASH=$(git log -1 '--pretty=%H') # retrieve the branch commit hash (used to determine who to assign the PR to)
          EXIT_CODE=0 # set default exit code to 0
          MSG=""
          DIFF_OUT="/tmp/diff" # output file to store git diff data

          ## simple function to exit and display some output
          message_out() {
            MSG=${1}
            cat <<EOF >> $GITHUB_STEP_SUMMARY
          $MSG
          EOF
          }

          ## Create and push the new source branch
          git checkout -b ${SOURCE_BRANCH}
          git add .
          git commit -m "chore: update clarity reference and functions - ${TIMESTAMP}"
          git push --set-upstream origin ${SOURCE_BRANCH}

          PR_TITLE="Merge ${SOURCE_BRANCH} to ${TARGET_BRANCH}"

          ## Check if the target branch exists
          if ! git ls-remote --exit-code --quiet --heads origin ${TARGET_BRANCH}; then
            MSG="Target Branch \`${TARGET_BRANCH}\` does not exist." # output message to display
            EXIT_CODE=$((EXIT_CODE+1)) # exit code (error)
            message_out "${MSG}" # store message as annotation
          fi

          ## fetch the target branch and create a diff
          git fetch origin ${TARGET_BRANCH}
          git diff --name-only origin/${TARGET_BRANCH}..origin/${SOURCE_BRANCH} > ${DIFF_OUT}

          ## check how many lines are in the diff (how many lines have changed)
          DIFF_NUM=$(sed -n '$=' ${DIFF_OUT})

          ## Finally, create the PR if at least 1 line has changed
          if [[ "${DIFF_NUM}" -gt 0 ]]; then
            PR=$(
              gh pr create \
                --head "${SOURCE_BRANCH}" \
                --base "${TARGET_BRANCH}" \
                --title "${PR_TITLE}" \
                --body "Release PR to Merge \`${SOURCE_BRANCH}\`->\`${TARGET_BRANCH}\`"
            )
            PR_NUM=$(basename "$PR") # parse the PR number from the url
            MSG="PR [$PR_NUM]($PR) (\`${SOURCE_BRANCH}\`->\`${TARGET_BRANCH}\`) created" # output message to display
            message_out "${MSG}" # store message as annotation
          else
            ## if the diff does not contain at least 1 change, exit successfully with a message
            MSG="No changes detected between \`${SOURCE_BRANCH}\`->\`${TARGET_BRANCH}\`" # output message to display
            message_out "${MSG}"  # store message as annotation
          fi

          ## exit the script using return code from loop
          exit ${EXIT_CODE}
